'use strict';
// Пояснение записи:
// Эта строка включает строгий режим
// В строгом режиме код выполняется с ограничениями, 
// которые помогают предотвратить распространенные ошибки и улучшить качество кода

// Использование рест для больших объектов может быть неэффективным 
// из-за затрат на производительность и память
// По сути тут у меня рекурсия. и рекурсия ограничена на глубину, т.е.
// Стек переполниться не сможет. Если использовать рекурсию, то только с условием выхода из нее


const plainify = (obj, prefix = '') => {
    // Проверяем, что obj является объектом
    if (typeof obj !== 'object' || obj === null) {
        return {};    
    }
  
    // Проверяем, что prefix является строкой
    if (typeof prefix !== 'string') {
      throw new Error('Префикс должен быть строкой');
    }
  
    // Используем Object.entries для итерации по ключ-значению объекта (хеш)
    return Object.entries(obj).reduce((acc, [key, value]) => {
      // Создаем новый ключ, конкатенируя префикс и оригинальный ключ
      const newKey = prefix ? `${prefix}.${key}` : key;
  
      // Проверяем, что value является объектом и не является null или массивом
      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
        return { ...acc, ...plainify(value, newKey) };
      } else {
        // Иначе добавляем его в результирующий объект
        return { ...acc, [newKey]: value };
      }
    }, {});
  };

